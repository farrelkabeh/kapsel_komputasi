// LU Decomposition Logic
function LUdekom(A) {
    const n = A.length;

    // Initialize Matrices
    const L = Array.from({ length: n }, (_, i) => 
        Array.from({ length: n }, (_, j) => (i === j ? fraction(1) : fraction(0)))
    );
    const U = A.map(row => row.map(value => fraction(value)));

    for (let k = 0; k < n - 1; k++) {
        for (let i = k + 1; i < n; i++) {
            const factor = U[i][k].div(U[k][k]);
            L[i][k] = factor;
            for (let j = k; j < n; j++) {
                U[i][j] = U[i][j].sub(factor.mul(U[k][j]));
            }
        }
    }

    // Fraction Output
    const fractionalL = L.map(row => row.map(value => value.toFraction()));
    const fractionalU = U.map(row => row.map(value => value.toFraction()));

    // Decimal Output
    const decimalL = L.map(row => row.map(value => value.valueOf()));
    const decimalU = U.map(row => row.map(value => value.valueOf()));

    console.log('L (Fraction):', fractionalL);
    console.log('U (Fraction):', fractionalU);
    console.log('L (Decimal):', decimalL);
    console.log('U (Decimal):', decimalU);

    // Call Output Functions
    showResult();
    resultYesLUDecomp(L, U);
    historyLUDecomp(L, U, A);
}
