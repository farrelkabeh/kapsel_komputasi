const { Matrix, rational, fraction } = math;

function LUdekom(A) {
    const n = A.length;
    const L = Array.from({ length: n }, (_, i) => 
        Array.from({ length: n }, (_, j) => (i === j ? fraction(1) : fraction(0)))
    );
    const U = A.map(row => row.map(value => fraction(value)));

    if (n !== A[0].length) {
        throw new TypeError('Matriks yang diberikan bukan matriks persegi.');
    } else {
        function deter(B, peng = fraction(1)) {
            const ukuran = B.length;
            if (ukuran === 1) {
                return peng.mul(B[0][0]);
            } else {
                let tanda = -1;
                let jawab = fraction(0);
                for (let i = 0; i < ukuran; i++) {
                    const boneka = [];
                    for (let j = 1; j < ukuran; j++) {
                        const tamb = [];
                        for (let k = 0; k < ukuran; k++) {
                            if (k !== i) {
                                tamb.push(B[j][k]);
                            }
                        }
                        boneka.push(tamb);
                    }
                    tanda *= -1;
                    jawab = jawab.add(peng.mul(fraction(tanda)).mul(B[0][i]).mul(deter(boneka)));
                }
                return jawab;
            }
        }

        function detsub(A) {
            const boneka = new Array(A.length).fill(0);
            for (let l = 0; l < A.length; l++) {
                const submatriks = A.slice(0, l + 1).map(row => row.slice(0, l + 1));
                boneka[l] = deter(submatriks);
            }
            return boneka;
        }

        function cekdetsub_lu(X) {
            return detsub(X).some(value => value.equals(fraction(0))) ? 1 : 0;
        }

        if (cekdetsub_lu(A) === 1) {
            throw new TypeError("Matriks tidak dapat didekomposisi LU. Ada minor utama terdepan dari matriks yang nol.");
        } else {
            for (let k = 0; k < n - 1; k++) {
                for (let i = k + 1; i < n; i++) {
                    const faktor = U[i][k].div(U[k][k]);
                    L[i][k] = faktor;
                    for (let j = k; j < n; j++) {
                        U[i][j] = U[i][j].sub(faktor.mul(U[k][j]));
                    }
                }
            }
            console.log('L =', L.map(row => row.map(value => value.toFraction())));
            console.log('U =', U.map(row => row.map(value => value.toFraction())));
        }
    }
}

const A = [[2, 1, 3], [1, 3, 2], [3, 2, 4]];
console.log('1. Misalkan matriks', A.length, 'x', A[0].length);
console.log('A =', A.map(row => row.map(value => fraction(value).toFraction())));
console.log('Dekomposisi LU dari A adalah');
LUdekom(A);

const B = [[-5, 15, 13, 2], [1, 3, 2, -1], [-3, 2, 9, -2], [9, -8, 3, 7]];
console.log('2. Misalkan matriks', B.length, 'x', B[0].length);
console.log('B =', B.map(row => row.map(value => fraction(value).toFraction())));
console.log('Dekomposisi LU dari B adalah');
LUdekom(B);

const C = [[9, -2, 5, 2, 6], [7, 4, -1, 5, -3], [-8, 10, 2, 1, 6], [2, 1, 6, -4, 5], [-1, 3, -2, -6, 9]];
console.log('3. Misalkan matriks', C.length, 'x', C[0].length);
console.log('C =', C.map(row => row.map(value => fraction(value).toFraction())));
console.log('Dekomposisi LU dari C adalah');
LUdekom(C);

const D = [[-5, 15, 13, 2], [1, -3, 2, -1], [-3, 2, 9, -2], [9, -8, 3, 7]];
console.log('4. Misalkan matriks', D.length, 'x', D[0].length);
console.log('D =', D.map(row => row.map(value => fraction(value).toFraction())));
console.log('Dekomposisi LU dari D adalah');
LUdekom(D);
